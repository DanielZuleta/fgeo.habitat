% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dist_in_torus.R
\name{dist_in_torus}
\alias{dist_in_torus}
\title{A general function to calculate distances in a n-dimensional toroid.}
\usage{
dist_in_torus(x, lower = rep(-Inf, ncol(x)), upper = rep(Inf, ncol(x)))
}
\arguments{
\item{x}{The matrix with the coordinates of the points. \link[=xxx The data
  sould contain exclusively the coordinates, right? If so it may be better
  to restrict the data to a matrix -- dataframes can mix vectors of different
  types which may fail.]{xxx The data
sould contain exclusively the coordinates, right? If so it may be better
to restrict the data to a matrix -- dataframes can mix vectors of different
types which may fail.}}

\item{lower, upper}{The minimum and maximum possible values of the coordinates
along each dimension. \link[=xxx should these always be vectors of length 2? --
  as shown in the example?]{xxx should these always be vectors of length 2? --
as shown in the example?}}
}
\value{
A numeric matrix.
}
\description{
By default, this function returns the distance in the Euclidean space
by assuming borders infinitely apart (i.e. points in a small portion
of an infinitely large toroid).
\link{xxx What happens if you change the default?}
}
\details{
The shortest distance in the toroid is the hypotenuse of the smallest
hyper-triangle. The 'internal' distance is the typical distance based on the
coordinates, as in the Euclidean space. The 'external' distance is crossing
borders, going around. There are only two ways of measuring distance along
each dimension.
}
\examples{
# [xxx can you add] an example in more than 2 dimensions?]

x <- data.frame(runif(10, min = 3, max = 5), runif(10, min = 13, max = 15))

# Euclidean distances
d0 <- dist(x) 
# default behaviour
d1 <- dist_in_torus(x) 
# distances in the toroid
d2 <- dist_in_torus(x, lower = c(3, 13), upper = c(5, 15))

par(mfrow = c(1, 3))
plot(x, xlim = c(3, 5), ylim = c(13, 15), xlab = "x", ylab = "y")
plot(c(d0), c(as.dist(d1)), main = "default = Euclidean = infinite toroid")
abline(0, 1)
plot(c(d0), c(as.dist(d2)), main = "finite toroid")
abline(0, 1)


# [xxx Is this behaviour OK?]
# # Passes
# dist_in_torus(matrix(c(NaN, NaN)))
# dist_in_torus(matrix(c(NA, NA)))
# dist_in_torus(matrix(c(Inf, Inf)))
# dist_in_torus(matrix(c(1, 1)))
# dist_in_torus(matrix(c(-1, -1)))
# dist_in_torus(matrix(c(1, 1)))
# dist_in_torus(data.frame(a = c(1, 1)))
# 
# # Fails
# dist_in_torus(matrix(a = c(1)))
# dist_in_torus(matrix(c(NULL, NULL)))
# 
# # [xxx What known outputs would be useful for tests? For example:
# library(testthat)
# v1 <- c(0, 1, 1, 0)
# expect_equal(c(dist_in_torus(matrix(c(1, 2)))), v1)
# expect_equal(c(dist_in_torus(matrix(c(0, 1)))), v1)
# # ...

}
\author{
Gabriel Arellano
}
