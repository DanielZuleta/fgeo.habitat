% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tt_test.R
\name{tt_test}
\alias{tt_test}
\alias{tt_test_lst}
\alias{torusonesp.all}
\title{Torus Translation Test to determine habitat associations of tree species.}
\usage{
tt_test(sp, habitat, abundance, plotdim = extract_plotdim(habitat),
  gridsize = extract_gridsize(habitat))

tt_test_lst(census, sp, habitat, plotdim = extract_plotdim(habitat),
  gridsize = extract_gridsize(habitat))

torusonesp.all(species, hab.index20, allabund20, plotdim, gridsize)
}
\arguments{
\item{sp, species}{Character sting giving species names. \code{tt_test()} and
\code{torusonesp.all()}can take only one species; \code{tt_test_lst()} can take any
number of species.}

\item{habitat, hab.index20}{Object giving the habitat designation for each
plot partition defined by \code{gridsize}.}

\item{abundance, allabund20}{The output of \code{abund_index()}.}

\item{plotdim}{Plot dimensions.}

\item{gridsize}{Grid size. If using \code{tt_test()}, ensure it matches the
gridsize on which the habitats are defined and the abundances were
calculated.}

\item{census}{A dataframe; a ForestGEO census.}
}
\value{
\itemize{
\item \code{tt_test_lst()}: A dataframe.
\item \code{tt_test()}: A numeric matrix.
}
}
\description{
Use these functions to determine habitat associations. You most likely need
only \code{tt_test_lst()}. \code{tt_test()} and \code{torusonesp.all} produce the same
result but work only for a single species. \code{torusonesp.all} is softly
deprecated -- it is included only to preserve the original code.
}
\details{
You should only try to determine the habitat association for sufficiently
abundant species - in a 50-ha plot, a minimum abundance of 50 trees/species
has been used.

\code{tt_test_lst()} uses \code{abundanceperquad()} -- via \code{abund_index()} -- which is
slow. You may calculate abundance per quadrat independently, feed it to the
argument \code{abundance} of \code{tt_test()}, and reformat the output with \code{to_df()}.
You can iterate over multiple species with a for loop or a functional such as
\code{lapply()}.
}
\examples{
# For easier data wranging
library(dplyr)

habitat <- luquillo_habitat
census <- luquillo_top3_sp

# Pick alive trees, of 10 mm or more
pick <- filter(census, status == "A", dbh >= 10)
# Pick sufficiently abundant trees
pick <- add_count(pick, sp)
pick <- filter(pick, n > 50)

species <- unique(pick$sp)

# Test any number of species (output a list of matrices)
tt_lst <- tt_test_lst(census, species, habitat)
str(tt_lst, give.attr = FALSE)

tt_lst[[1]]

# Try also: View((to_df(tt_lst)))
head(to_df(tt_lst))

# Iterate over multiple species
plotdim <- c(320, 500)
gridsize <- 20
abundance <- abund_index(pick, plotdim, gridsize)

tt_lst <- lapply(species, tt_test, habitat, abundance, plotdim, gridsize)
tt_lst



# Test one species with original function (outputs a matrix)
tt_mat <- torusonesp.all(species[[1]],
  hab.index20 = habitat,
  allabund20 = abundance,
  plotdim = plotdim,
  gridsize = gridsize
)
tt_mat

# Coerce to class tt so you can use to_df()
coerced <- to_df(as_tt(tt_mat))
head(coerced)

# Test multiple species with original function (outputs a matrix)
tt_mat_lst <- lapply(
  species,
  torusonesp.all,
  hab.index20 = habitat,
  allabund20 = abundance,
  plotdim = plotdim,
  gridsize = gridsize
)
tt_mat_lst

# Coerce to class tt so you can use to_df()
coerced2 <- as_tt_lst(tt_mat_lst)
head(to_df(coerced2))
}
\seealso{
\code{\link[=to_df]{to_df()}}.
}
\author{
Sabrina Russo, Daniel Zuleta, Matteo Detto, and Kyle Harms.
}
