% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tt_test.R
\name{tt_test}
\alias{tt_test}
\alias{tt_test_one}
\title{Torus Translation Test to determine habitat associations of tree species.}
\usage{
tt_test(sp, census, habitat, plotdim = extract_plotdim(habitat),
  gridsize = extract_gridsize(habitat))

tt_test_one(species, hab.index20, allabund20, plotdim, gridsize)
}
\arguments{
\item{sp, species}{Character sting giving species names. \code{tt_test_one()} can
take only one species; \code{tt_test()} can take any number of species.}

\item{census}{A dataframe; a ForestGEO census.}

\item{habitat, hab.index20}{Object giving the habitat designation for each
plot partition defined by \code{gridsize}.}

\item{plotdim}{Plot dimensions.}

\item{gridsize}{Grid size. If using \code{tt_test_one()}, ensure it matches the
gridsize on which the habitats are defined and the abundances were
calculated.}

\item{allabund20}{The output of \code{abundanceperquadrat()}.}

\item{ttt}{Result of a tt_test().}
}
\value{
A numeric matrix.
}
\description{
Torus Translation Test (TT test) to determine habitat associations of tree
species.
}
\details{
You should only try to determine the habitat association for sufficiently
abundant species - in a 50-ha plot, a minimum abundance of 50 trees/species
has been used.

The wrapper \code{tt_test()} uses \code{abundanceperquad()} internaly which is slow.
You may calculate abundance per quadrat independently, feed it to the
argument \code{allabund20} of \code{tt_test_one()}, and reformat the output with
\code{tt_gather()}. See Examples to iterate over multiple species.
}
\examples{
# Not crucial but makes data wranging more succint and easier to understand
library(dplyr)

# Example data
hab <- luquillo_habitat
cns <- luquillo_top3_sp

# Pick alive trees, of 10 mm or more
pick <- filter(cns, status == "A", dbh >= 10)
# Pick sufficiently abundant trees
pick <- add_count(pick, sp)
pick <- filter(pick, n > 50)

spp <- unique(pick$sp)

# Test with a wrapper
out <- tt_test(spp, cns, hab)
# For a view with filtering feature use View(out)
out

# Test without the wrapper
pdim <- c(320, 500)
gsize <- 20
n_quad <- abundanceperquad(
  pick, plotdim = pdim, gridsize = gsize, mindbh = 0
)$abund
out2 <- lapply(
  spp, tt_test_one, 
  hab.index20 = hab, 
  allabund20 = n_quad, 
  plotdim = pdim,
  gridsize = gsize
)
out2
# Nicer view
tt_gather(out2)
}
\seealso{
Example at \url{https://bookdown.org/fgeocomm/ttt/}.
}
\author{
Sabrina Russo, Daniel Zuletta, Matteo Detto, and Kyle Harms.
}
