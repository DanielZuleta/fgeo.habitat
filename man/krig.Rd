% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/krig.R
\name{krig}
\alias{krig}
\alias{krig_lst}
\alias{GetKrigedSoil}
\title{Krige soil data following the methodology of the John et al. (2007).}
\usage{
krig(soil, var, params = NULL, gridsize = 20,
  plotdim = guess_plotdim(soil), breaks = krig_breaks(2, 320, 30),
  use_ksline = TRUE, quiet = FALSE)

krig_lst(soil, var, params = NULL, gridsize = 20,
  plotdim = guess_plotdim(soil), breaks = krig_breaks(2, 320, 30),
  use_ksline = TRUE, quiet = FALSE)

GetKrigedSoil(df.soil, var, gridSize = 20, krigeParams = NULL,
  xSize = 1000, ySize = 500, breaks = krig_breaks(2, 320, 30),
  useKsLine = TRUE)
}
\arguments{
\item{soil, df.soil}{The data frame with the points, coords specified in the
columns \code{gx}, \code{gy}.}

\item{var}{A character verctor giving the name in the soil dataset of
the \code{var}iable(s) containing soil data to krige. \code{var} must be of lenght 1
for \code{krig()} but can be of lenght greater than one for \code{krig_lst()}.}

\item{params, krigeParams}{If you want to pass specified kriging parameters;
see \code{\link[=krig_auto_params]{krig_auto_params()}} for each parameter.}

\item{gridsize, gridSize}{Points are kriged to the center points of a grid of
this size.}

\item{plotdim, xSize, ySize}{Numeric vectors giving x and y dimensions of the
plot:
\itemize{
\item \code{plotdim}: Must be of lenght 2 with the format \code{c(x, y)}.
\item \code{xSize}, \code{ySize}: Each must be of lenght 1.
}}

\item{breaks}{Breaks/intervals used to calculate the semivariogram, which
only happens if \code{krigeParams = NULL} (default).}

\item{use_ksline, useKsLine}{Use the \code{\link[geoR:ksline]{geoR::ksline()}} function? Use \code{TRUE} to
calculate a "best" semivariogram based on default parameters via
\code{geoR::variogram()}]. Use \code{FALSE} to base calculation on parameters passed
to \code{params}.}

\item{quiet}{Use \code{TRUE} to sppresses messages.}

\item{...}{Arguments passed to \code{\link[=krig]{krig()}}.}
}
\value{
A list with the following items:
\itemize{
\item \code{df}: Data frame of kriged values (column z) at each grid point (x, y).
\item \code{df.poly}: Data frame of the polynomial surface fitted to the raw data.
\item \code{lambda}: The "lambda" value used in the Box-Cox transform of the raw
data.
\item \code{vg}: A list giving the variogram parameters used for the kriging.
\item \code{vm}: Minimum loss value returned from \code{\link[geoR:variofit]{geoR::variofit()}}.
}
}
\description{
Functions to krige soil data. The most common usage patterns are
\code{summary(krig(ONE-SOIL-VARIABLE, ...))} and
\code{to_df(krig_lst(ANY-NUMBER-OF-SOIL-VARIABLES, ...))}; but you may use other
options:
\itemize{
\item \code{GetKrigedSoil()} is the original function but it is softly deprecated. Its
result is the same as \code{krig()} but its interface is different and lacks some
convenient features.
\item \code{krig()} has an interface consistent with other functions of ForestGEO. It
outputs a list of subclass "krig", which has a method for \code{summary()}(see
examples). \code{krig()} also tries to guess \code{plotdim} and informs both the
guessed \code{plotdim} and the \code{gridsize} provided. It also allows you to suppress
messages.
\item \code{krig_lst} allows iterating over multiple soil \code{var}iables. It lists the
result of each iteration and adds the subclass "krig_lst" which has a method
for \code{to_df()} (see examples).
}
}
\section{Breaks default}{

The default breaks argument is set to have more points where the exponential
curve rises the most and fewer at large distances. This means that the curve
fitting is not overly biased by points beyond the effective maximum range.
}

\examples{
# Example data
soil <- soil_random

# Krige with automated parameters

# Original funciton
auto1 <- GetKrigedSoil(soil, var = "m3al")
summary(auto1)

# Wrappers produce the same output but have some convenient feature
# Suppress messages
auto2 <- krig(soil, var = "m3al", quiet = TRUE)
# More complete summary
summary(auto1)

# Enable more compleate summary with output of GetKrigedSoil()
summary(as_krig(auto1))



# Krige with custom params (arbitrary but based on automated kriging params)

params <- list(
  model = "circular", range = 100, nugget = 1000, sill = 46000, kappa = 0.5
)
custom <- krig(soil, var = "m3al", params = params, quiet = TRUE)
summary(custom)



# Krig multiple soil variables

soil <- soil_fake
vars <- c("c", "p")
out_lst <- krig_lst(soil, vars, quiet = TRUE)

result <- to_df(out_lst, item = "df")
head(result)

tail(result)

# Same with original function

result2 <- lapply(vars, function(.vars) GetKrigedSoil(soil, .vars))

# To enable convenient features first coerce the result to a krig_lst object
result2 <- setNames(result2, vars)
coerced <- as_krig_lst(result2)
head(to_df(coerced))
}
\seealso{
\code{\link[geoR:variofit]{geoR::variofit()}}, \code{\link[geoR:variog]{geoR::variog()}}, \code{\link[geoR:as.geodata]{geoR::as.geodata()}},
\code{\link[geoR:ksline]{geoR::ksline()}}, \code{\link[geoR:krige.conv]{geoR::krige.conv()}}, \code{\link[geoR:krige.control]{geoR::krige.control()}}.

\code{\link[=to_df.krig_lst]{to_df.krig_lst()}}, \code{\link[=summary.krig]{summary.krig()}}.
}
\author{
Graham Zemunik (grah.zem@gmail.com).
}
